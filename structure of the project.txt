ideas hierarchy is represented using indentation. Please read with notepad++ or sublimText :)

classes (please add a constructor using all fields (including inherited) and a destructor) :
	DisplayedObject : class with virtual methods
		fields : manager, x, y
		methods : display(), destroy()
	AnimatedObject : abstract class, inherits from DisplayedObject
		methods : animate(totalTime, deltaTime)
	CollidingObject : abstract class, inherits from DisplayedObject
		fields :
			isMoving
			hitBox (a list of points defining the hitBox of an object, used to check collision <- assume convexity ?)
			collisionEffect <- tell the other object what it have to do when there is a collision
		methods :
			checkIfItCollidesWith(otherObject) <- is behind all lines made by hitBox points (logical AND)
			applyCollisionEffectTo(otherObject) <- make otherObject bounce (change velocity)
	ObjectsManager :
		fields : DisplayedObjects, AnimatedObjects, CollidingObjects
		methods : displayObjects(), animateObjects(), computeCollisions()
	LimitWall : inherits from CollidingObject
		fields : point A, point B
		methods : the hitBox, x and y are determined in constructor thanks to A and B
	DeathWall : inherits from LimitWall
		methods : applyCollisionEffectTo(otherObject) destroy otherObject (i.e. calls otherObject.Destroy())
	Ball : inherits from AnimatedObject
		fields player, xSpeed, ySpeed
		methods :
			animate() by adding xSpeed and ySpeed (multiplied by deltaTime to make it FPS-independent) to X and Y
			display() by using a spherical quadric
			destroy() make the player loose health
	Player :
		fields : game, score, health
		methods :
			removeHealth(amount) <- call game's GameOver() if <= 0
	Paddle : inherits from CollidingObject
		fields : player, paddleController
		methods :
			constructor only needs the width of the paddle
			applyCollisionEffectTo(otherObject) change the direction as described in the project's subject
			animate() use PaddleController()->y (see bellow)
	Brick : inherits from CollidingObject
		fields : level, type
		methods :
			destroy() makes player gain score (level->game->player->
				and make level know when it is destroyed (level->BrickDestroyed())
	Level :
		fields : game, a list of bricks (updated when bricks are destroyed)
		methods :
			load() : spawn bricks, the paddle and a ball
			brickDestroyed() : call game's NextLevel() when there is no bricks left (using a private numberOfBrick counter ?)
	Game :
		fields : a list of levels
		methods :
			start() : load first level
			gameOver() : calls Start() (on click ?)
			nextLevel() : load next level (using a private levelNumber)
	PaddleController() :
		fields : y (between 0 and 1)
	DetectMotion : used by the PaddleController
	
NB : one class can inherit from two classes : see https://fr.wikibooks.org/wiki/Programmation_C-C%2B%2B/C%2B%2B_:_La_couche_objet/Classes_virtuelles
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
bonus ideas :
	game over screen
	camera shake
	two players :
		split detection screen, share the same 3D scene
		balls only bounce on the corresponding player's paddle
		(change Destroy() to Destroy(byWhat) to count score)
	slow-mo / other bonuses trigered when the hand fully cover the zone
	other paddle trajectories : 360 (circulary) <- 2D movement detection
